[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Brenden Smith",
    "section": "",
    "text": "Hello, I’m Brenden. I am an MPH candidate with interests in health equity, harm reduction, and community engagement. I am a data analyst, community researcher, and R enthusiast.\nIf you would like to see some of my current and past work, you can visit my portfolio page or check out my blog."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome to my Blog",
    "section": "",
    "text": "This is hard for me to do! I’ve been wanting to start blogging for some time now. This whole website is only possible because of the wonderful blog posts by Bea Milz and Alber Rapp. A huge huge thank you to them both. Their posts demonstrate how easy it is to get up and running with a Quarto blog!\nInspired by their words, there is no better time to start writing. So consider this a first introduction. I am setting the intention to post monthly to this blog."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "HM878: Helper Functions\n\n\n\nR\n\n\npackages\n\n\nvignette\n\n\n\nA walkthrough of the helper functions in the package hm878\n\n\n\nBrenden Smith\n\n\nOct 12, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTwitter Bots\n\n\n\nR\n\n\ncolor\n\n\nweb-scraping\n\n\n\n‘Suppose I were to begin by saying that I had fallen in love with a color.’\n\n\n\nBrenden Smith\n\n\nMar 1, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMichigan COVID-19 County Maps\n\n\n\nR\n\n\nmaps\n\n\n\nTwo quick, interactive COVID-19 maps.\n\n\n\nBrenden Smith\n\n\nOct 11, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOpioid Plotting Practice\n\n\n\nR\n\n\nggplot2\n\n\n\nA basic ggplot2 walkthrough and an introduction to plotly.\n\n\n\nBrenden Smith\n\n\nOct 9, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/welcome/index.html#header-two",
    "href": "posts/welcome/index.html#header-two",
    "title": "Welcome",
    "section": "Header two",
    "text": "Header two\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/test post/index.html",
    "href": "posts/test post/index.html",
    "title": "test post",
    "section": "",
    "text": "This is my test."
  },
  {
    "objectID": "posts/welcome/index.html#who-am-i",
    "href": "posts/welcome/index.html#who-am-i",
    "title": "Welcome to my Blog (-:",
    "section": "Who am I?",
    "text": "Who am I?\nMy name is Brenden Smith. At this point, I am a little over a year into my graduate studies. I attend Michigan State University and I am working towards my Master in Public Health."
  },
  {
    "objectID": "posts/welcome/index.html#what-will-i-post",
    "href": "posts/welcome/index.html#what-will-i-post",
    "title": "Welcome to my Blog",
    "section": "What will I post?",
    "text": "What will I post?\nTo start, I think I will document certain projects I’ve taken on that relate to data analysis and visualization. I consider myself a beginning to intermediate level R user. To help me retain the information I’m learning, I will try to blog everything that seems worth sharing. I hope that these help you, if you are trying to learn more about R like I am.\nI don’t want my posts to be exclusive to R. Like any tool, the language has its strengths and weaknesses. I will likely include some content on PowerBI and perhaps its integration with R. I also want to document notable takeaways from my experiences in graduate school and other projects I am involved with in my professional work."
  },
  {
    "objectID": "posts/welcome/index.html#stay-in-touch",
    "href": "posts/welcome/index.html#stay-in-touch",
    "title": "Welcome to my Blog",
    "section": "Stay in touch",
    "text": "Stay in touch\nIf this description interests you, please follow along with my journey. If you are interested in hearing more about my work or would like to share resources, let me know! I have included links to my GitHub, Twitter, and LinkedIn. Feel free to reach out to my on any of those platforms (or comment here on my blog)."
  },
  {
    "objectID": "posts/Michigan COVID Cases and Deaths by County/index.html",
    "href": "posts/Michigan COVID Cases and Deaths by County/index.html",
    "title": "Michigan COVID-19 County Maps",
    "section": "",
    "text": "This post is intended to demonstrate some basic ways to map data in R. For our example, we will be creating a choropleth map of Michigan’s counties featuring COVID-19 data. The result is something quite similar to the map featured on the state’s dashboard. The data used in this post is from October 4, 2022.\nFor the sake of practice, we will walk through two different ways to go about this process. First we will use ggplot2. We will use a function called map_data to pull in shape file data easily. In our second example, we will use leaflet to create a better looking version of this map and use a raw shape file."
  },
  {
    "objectID": "posts/shiny/index.html",
    "href": "posts/shiny/index.html",
    "title": "Shiny test",
    "section": "",
    "text": "Warning: package 'tidycensus' was built under R version 4.1.2\n\n\nWarning: package 'leaflet' was built under R version 4.1.2\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.3.6      ✔ purrr   0.3.4 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.2      ✔ forcats 0.5.1 \n\n\nWarning: package 'tibble' was built under R version 4.1.2\n\n\nWarning: package 'tidyr' was built under R version 4.1.2\n\n\nWarning: package 'readr' was built under R version 4.1.2\n\n\nWarning: package 'dplyr' was built under R version 4.1.2\n\n\nWarning: package 'stringr' was built under R version 4.1.2\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\nTo install your API key for use in future sessions, run this function with `install = TRUE`.\n\n\nGetting data from the 2016-2020 5-year ACS\n\n\nDownloading feature geometry from the Census website.  To cache shapefiles for use in future sessions, set `options(tigris_use_cache = TRUE)`.\n\n\nFetching data by table type (\"B/C\", \"S\", \"DP\") and combining the result.\n\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |=                                                                     |   1%\n  |                                                                            \n  |=                                                                     |   2%\n  |                                                                            \n  |==                                                                    |   2%\n  |                                                                            \n  |==                                                                    |   3%\n  |                                                                            \n  |===                                                                   |   4%\n  |                                                                            \n  |===                                                                   |   5%\n  |                                                                            \n  |====                                                                  |   5%\n  |                                                                            \n  |====                                                                  |   6%\n  |                                                                            \n  |=====                                                                 |   7%\n  |                                                                            \n  |=====                                                                 |   8%\n  |                                                                            \n  |======                                                                |   8%\n  |                                                                            \n  |=======                                                               |   9%\n  |                                                                            \n  |=======                                                               |  10%\n  |                                                                            \n  |========                                                              |  11%\n  |                                                                            \n  |========                                                              |  12%\n  |                                                                            \n  |=========                                                             |  12%\n  |                                                                            \n  |=========                                                             |  13%\n  |                                                                            \n  |==========                                                            |  14%\n  |                                                                            \n  |==========                                                            |  15%\n  |                                                                            \n  |===========                                                           |  16%\n  |                                                                            \n  |============                                                          |  17%\n  |                                                                            \n  |=============                                                         |  19%\n  |                                                                            \n  |==============                                                        |  20%\n  |                                                                            \n  |===============                                                       |  21%\n  |                                                                            \n  |================                                                      |  22%\n  |                                                                            \n  |=================                                                     |  24%\n  |                                                                            \n  |=================                                                     |  25%\n  |                                                                            \n  |==================                                                    |  26%\n  |                                                                            \n  |===================                                                   |  27%\n  |                                                                            \n  |====================                                                  |  28%\n  |                                                                            \n  |=====================                                                 |  30%\n  |                                                                            \n  |======================                                                |  31%\n  |                                                                            \n  |=======================                                               |  33%\n  |                                                                            \n  |========================                                              |  34%\n  |                                                                            \n  |=========================                                             |  36%\n  |                                                                            \n  |==========================                                            |  37%\n  |                                                                            \n  |===========================                                           |  38%\n  |                                                                            \n  |===========================                                           |  39%\n  |                                                                            \n  |============================                                          |  40%\n  |                                                                            \n  |=============================                                         |  42%\n  |                                                                            \n  |==============================                                        |  43%\n  |                                                                            \n  |===============================                                       |  44%\n  |                                                                            \n  |================================                                      |  46%\n  |                                                                            \n  |=================================                                     |  47%\n  |                                                                            \n  |=================================                                     |  48%\n  |                                                                            \n  |==================================                                    |  49%\n  |                                                                            \n  |===================================                                   |  50%\n  |                                                                            \n  |===================================                                   |  51%\n  |                                                                            \n  |====================================                                  |  52%\n  |                                                                            \n  |=====================================                                 |  53%\n  |                                                                            \n  |======================================                                |  54%\n  |                                                                            \n  |=======================================                               |  55%\n  |                                                                            \n  |========================================                              |  56%\n  |                                                                            \n  |========================================                              |  58%\n  |                                                                            \n  |=========================================                             |  59%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |===========================================                           |  62%\n  |                                                                            \n  |============================================                          |  63%\n  |                                                                            \n  |=============================================                         |  64%\n  |                                                                            \n  |==============================================                        |  65%\n  |                                                                            \n  |===============================================                       |  67%\n  |                                                                            \n  |===============================================                       |  68%\n  |                                                                            \n  |================================================                      |  69%\n  |                                                                            \n  |=================================================                     |  70%\n  |                                                                            \n  |==================================================                    |  71%\n  |                                                                            \n  |===================================================                   |  73%\n  |                                                                            \n  |====================================================                  |  74%\n  |                                                                            \n  |=====================================================                 |  75%\n  |                                                                            \n  |=====================================================                 |  76%\n  |                                                                            \n  |======================================================                |  77%\n  |                                                                            \n  |=======================================================               |  79%\n  |                                                                            \n  |========================================================              |  80%\n  |                                                                            \n  |=========================================================             |  81%\n  |                                                                            \n  |==========================================================            |  82%\n  |                                                                            \n  |===========================================================           |  84%\n  |                                                                            \n  |============================================================          |  86%\n  |                                                                            \n  |=============================================================         |  87%\n  |                                                                            \n  |==============================================================        |  88%\n  |                                                                            \n  |==============================================================        |  89%\n  |                                                                            \n  |===============================================================       |  90%\n  |                                                                            \n  |=================================================================     |  92%\n  |                                                                            \n  |=================================================================     |  93%\n  |                                                                            \n  |==================================================================    |  95%\n  |                                                                            \n  |===================================================================   |  96%\n  |                                                                            \n  |====================================================================  |  97%\n  |                                                                            \n  |===================================================================== |  98%\n  |                                                                            \n  |======================================================================|  99%\n  |                                                                            \n  |======================================================================| 100%"
  },
  {
    "objectID": "posts/Michigan COVID Cases and Deaths by County/index.html#using-leaflet",
    "href": "posts/Michigan COVID Cases and Deaths by County/index.html#using-leaflet",
    "title": "Michigan COVID-19 County Maps",
    "section": "Using Leaflet",
    "text": "Using Leaflet\n\n\nCode\n# leaflet -----------------------------------------------------------------\nlibrary(sp)\nlibrary(rgdal)\nlibrary(leaflet)\n\nmiCounties &lt;- readOGR(\"Counties_(v17a)\", \"Counties_(v17a)\")\n\n\nOGR data source with driver: ESRI Shapefile \nSource: \"/Users/brendensmith/Desktop/R/qblog/posts/Michigan COVID Cases and Deaths by County/Counties_(v17a)\", layer: \"Counties_(v17a)\"\nwith 83 features\nIt has 15 fields\n\n\nCode\nmicovid &lt;- micovid %&gt;%\n  mutate(NAME = case_when(\n    COUNTY == \"St Clair\" ~ \"St. Clair\",\n    COUNTY == \"St Joseph\" ~ \"St. Joseph\",\n    TRUE ~ COUNTY\n  ))\n\ncombined &lt;- merge(miCounties, micovid)\n\n\n# pals and labels for each map -------------------------------------------------------\n\ncase_bins &lt;- c(0, 1000, 5000, 15000, 30000, 100000, Inf)\ncase_pal &lt;- colorBin(\"Blues\", domain = combined$total_cases, bins = case_bins)\n\ncase_labels &lt;- sprintf(\n  \"&lt;strong&gt;%s&lt;/strong&gt;&lt;br/&gt;Cases: %g\",\n  combined$NAME, combined$total_cases\n) %&gt;% lapply(htmltools::HTML)\n\ndeath_bins &lt;- c(0, 50, 100, 150, 500, 1500, 3000, Inf)\n\ndeath_pal &lt;- colorBin(\"Reds\", domain = combined$total_deaths, bins = death_bins)\n\ndeath_labels  &lt;- sprintf(\n  \"&lt;strong&gt;%s&lt;/strong&gt;&lt;br/&gt;Deaths: %g\",\n  combined$NAME, combined$total_deaths\n) %&gt;% lapply(htmltools::HTML)\n\nleaflet() %&gt;% \n  addTiles(group = \"base\") %&gt;%\n  addPolygons(data = combined,\n              group = \"Cases\",\n              fillColor = ~case_pal(total_cases),\n              weight = 2,\n              opacity = 1,\n              color = \"white\",\n              dashArray = \"3\",\n              fillOpacity = 0.7,\n              highlightOptions = highlightOptions(\n                weight = 5,\n                color = \"#666\",\n                dashArray = \"\",\n                fillOpacity = 0.7,\n                bringToFront = TRUE),\n              label = case_labels,\n              labelOptions = labelOptions(\n                style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n                textsize = \"15px\",\n                direction = \"auto\")) %&gt;%\n  addLegend(data = combined,\n            title = \"Cases\",\n            pal = case_pal, values = ~total_cases, opacity = 0.7,\n            position = \"bottomright\", group = \"Cases\") %&gt;%\n  addPolygons(data = combined,\n              group = \"Deaths\",\n              fillColor = ~death_pal(total_deaths),\n              weight = 2,\n              opacity = 1,\n              color = \"white\",\n              dashArray = \"3\",\n              fillOpacity = 0.7,\n              highlightOptions = highlightOptions(\n                weight = 5,\n                color = \"#666\",\n                dashArray = \"\",\n                fillOpacity = 0.7,\n                bringToFront = TRUE),\n              label = death_labels,\n              labelOptions = labelOptions(\n                style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n                textsize = \"15px\",\n                direction = \"auto\")) %&gt;%\n  addLegend(data = combined, \n            title = \"Deaths\",\n            pal = death_pal, values = ~total_deaths, opacity = 0.7,\n            position = \"bottomright\", group = \"Deaths\") %&gt;%\n  addLayersControl(overlayGroups = c(\"Cases\", \"Deaths\"),\n                   options = layersControlOptions(collapsed = FALSE)) %&gt;%\n  hideGroup(\"Deaths\")"
  },
  {
    "objectID": "posts/welcome/index.html#so-who-am-i",
    "href": "posts/welcome/index.html#so-who-am-i",
    "title": "Welcome to my Blog",
    "section": "So who am I?",
    "text": "So who am I?\nMy name is Brenden Smith. At this point, I am a little over a year into my graduate studies. I attend Michigan State University and I am working towards my Master in Public Health. I am most interested in data analysis, visualization, community-engaged research, and health disparities.\nPublic health as a field can be very broad. By its very nature, the field is multidisciplinary and covers a wide array of topics. I come from primarily a policy background. I received my Bachelor of Arts in social relations and policy from James Madison College (also here at MSU). My senior seminar was focused on US health care and policy and pretty much ever since I’ve been interested in a career in PH.\nDuring my undergrad I was also introduced to R for the first time in a quantitative methods course. That introduction began my interest in the programming language. More recently I have discovered the tidyverse and shiny packages. It is so exciting to be a part of the open-source community. I hope to contribute to it as I have most definitely benefited from the wealth of knowledge already available on the internet."
  },
  {
    "objectID": "posts/Michigan COVID Cases and Deaths by County/index.html#ggplot2-map",
    "href": "posts/Michigan COVID Cases and Deaths by County/index.html#ggplot2-map",
    "title": "Michigan COVID-19 County Maps",
    "section": "Ggplot2 map",
    "text": "Ggplot2 map\nTo start, we will make a base map with ggplot2 and make it interactive with plotly. First, as always, we load in the libraries we will be using.\n\n\nCode\n# Load packages -----------------------------------------------------------\nlibrary(tidyverse) # really just dplyr but the whole verse can't hurt\nlibrary(openxlsx) # to read in excel data\nlibrary(plotly) # for the interactive part\nlibrary(RColorBrewer) # to set our color palette\n\n\nNext, we will get our county map. To do this we can simply call the function map_data and specify that we want it at the county level. This will give us data for every county in the US. Because we are only mapping Michigan, we add a second line to subset our first data frame ‘counties’ to only include Michigan.\n\n\nCode\n# Make the base state map -------------------------------------------------\ncounties &lt;- map_data(\"county\")\nmi_county &lt;- subset(counties, region == \"michigan\")\n\n\nFor our COVID-19 data, I am importing an older file from state’s website (linked previously). If you want a current version to follow along, you can find it there. Once the file is loaded into R Studio, we need to make a few adjustments. The original file splits the cases into two categories, confirmed and probable. On the state’s dashboard, they combine these numbers into a total for map reporting. We will do the same. This is easily done with the group_by and summarise functions. We will also change the county names to lowercase in preparation for merging.\n\n\nCode\n# Data prep ---------------------------------------------------------------\n\nmicovid &lt;- read.xlsx(\"Cases and Deaths by County 2022-10-04.xlsx\")\n\nmicovid &lt;- micovid %&gt;%\n  group_by(COUNTY) %&gt;%\n  summarise(total_cases = sum(Cases),\n            total_deaths = sum(Deaths)) %&gt;%\n  ungroup() %&gt;%\n  mutate(subregion = tolower(COUNTY))\n\ncases_and_county &lt;- inner_join(mi_county, micovid, by = \"subregion\")\ncases_and_county &lt;- cases_and_county %&gt;%\n  rename(county = COUNTY)\n\n\n\n\nCode\ncases_and_county&lt;- cases_and_county %&gt;%\n  mutate(Category = case_when(total_cases &lt; 1000 ~ '0-999', \n                              total_cases &lt; 5000 ~ '1000-4999',\n                              total_cases &lt;15000 ~ '5000-14999',\n                              total_cases &lt; 30000 ~ '15000-29999',\n                              total_cases &lt; 100000~ '30000-99999',\n                              total_cases &lt; 1000000 ~ '100000+',\n                              TRUE ~ 'NA'))\n\ncases_and_county$Category &lt;- as.factor(cases_and_county$Category)\n\nlvls &lt;- c('0-999', \n          '1000-4999',\n          '5000-14999',\n          '15000-29999',\n          '30000-99999',\n          '100000+')\n\ncases_and_county$Category &lt;- fct_relevel(cases_and_county$Category, lvls)\n\n\n\n\nCode\n# Making the map ----------------------------------------------------------\n\np &lt;- c(\"#ACD1E7\", \"#82BADC\", \"#59A1CF\", \"#236893\",\"#174562\", \"#122548\")\n\nlabel &lt;- list(\n  bgcolor = \"#EEEEEE\",\n  font = list(color = \"black\")\n)\n\nnoax &lt;- list(\n  title = \"\",\n  zeroline = FALSE,\n  showline = FALSE,\n  showticklabels = FALSE,\n  showgrid = FALSE\n)\n\ng &lt;- cases_and_county %&gt;%\n  ggplot(aes(long, lat, \n                group = group,\n                text = paste('&lt;/br&gt;County:', county, '&lt;/br&gt;Category:', Category,\n                             '&lt;/br&gt;Cases:', total_cases)))+\n  geom_polygon(colour = alpha(\"black\", 1/2), fill = NA) +\n  geom_polygon(data = cases_and_county, colour = \"black\", aes(fill = Category))+\n  theme_void() +\n  scale_fill_manual(values = p) \n\n\n\n\nCode\nggplotly(g, tooltip = c(\"text\"), width = 700, height = 600) %&gt;%\n  layout(xaxis = noax,\n         yaxis = noax) %&gt;%\n  style(hoverlabel = label) %&gt;%\n  config(displayModeBar = FALSE)"
  },
  {
    "objectID": "posts/Michigan COVID Cases and Deaths by County/index.html#conclusion",
    "href": "posts/Michigan COVID Cases and Deaths by County/index.html#conclusion",
    "title": "Michigan COVID-19 County Maps",
    "section": "Conclusion",
    "text": "Conclusion"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Portfolio",
    "section": "",
    "text": "Academic Posters\n\n\nVarious academic and professional projects that I have prepared into poster presentations.\n\n\n\nBrenden Smith\n\n\nAug 3, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy Tuesday\n\n\nA collection of practice visualizations from the Tidy Tuesday weekly data project.\n\n\n\nBrenden Smith\n\n\nFeb 27, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPowerBI Dashboards\n\n\nA collection of work of mine in PowerBI.\n\n\n\nBrenden Smith\n\n\nDec 10, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMental Health and the Pandemic\n\n\nNCHS/AcademyHealth Data Visualization Challenge Submission\n\n\n\nBrenden Smith\n\n\nNov 14, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/Michigan COVID-19 Dashboard/index.html",
    "href": "projects/Michigan COVID-19 Dashboard/index.html",
    "title": "PowerBI Dashboards",
    "section": "",
    "text": "Power BI\nThis page shows the Power BI projects that I have created in my academic and professional work. Samples below contain publicly available data.\n\n\nCOVID-19 Long Term Care Data Dashboard\nThis project was created to support the MDHHS long term care data reporting live on their website. I joined this project in early 2023 and recreated an existing dashboard that was made in Tableau into a PowerBI format. This was done to ease the integration process. The dashboard went live in March and was regularly updated until mid-May. This change was due to changing data reporting requirements.\n\n\n\nCOVID-19 Cases and Deaths by County\nThis past semester, I had the pleasure of taking a course on health informatics. We were tasked with creating an entire interactive dashboard using Power BI. This is my first experience using the software, and I have to say it is a lot of fun to play around with. After learning some of the ins and outs of exporting and transforming data, formatting beautiful visualizations came surprisingly easy.\nThe dashboard featured here is a re-imagining of the State’s current COVID-19 dashboard. I began with recreating the content they already provide. This entire project was made using the publicly available data files on the SOM’s website. In the last tab, I incorporated the CDC’s community level data that they provide for each state. I included this as the data provided is made comparable by population standardization, and increasingly, it seems that officials are looking to these levels specifically for policy guidance.\nTo view the dashboard in full screen you can use the link here. Below is the embedded dashboard. Enjoy!"
  },
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "Resume",
    "section": "",
    "text": "#####Minor in Chicano/Latino Studies"
  },
  {
    "objectID": "projects/Tidy Tuesday/index.html",
    "href": "projects/Tidy Tuesday/index.html",
    "title": "Tidy Tuesday",
    "section": "",
    "text": "]{#img-fluid}"
  },
  {
    "objectID": "posts/Bluets/index.html",
    "href": "posts/Bluets/index.html",
    "title": "Twitter Bots",
    "section": "",
    "text": "Update: Since a certain someone took over the bird app, this bot is no longer functional. Unfortunately, it is not worth paying $100/month to post random shades of blue. What an injustice."
  },
  {
    "objectID": "posts/Bluets/index.html#using-rvest",
    "href": "posts/Bluets/index.html#using-rvest",
    "title": "Twitter Bots",
    "section": "Using ‘rvest’",
    "text": "Using ‘rvest’\nTo help us source our data, the library 'rvest' provides everything we need. In order to create a data frame containing the color name and the hex code, we need to:\n\nimport the web search’s html\npull out the two elements from the code (name, hex code)\nthen repeat this process for each of the 89 pages\n\nThe function 'read_html' from rvest makes the first step incredibly easily. For this, we simply pass in the web address as an argument in the function and save the output as a new value called 'page'.\n\n\nCode\nlibrary(rvest)\nlink &lt;- \"https://www.color-name.com/search/blue\"\npage &lt;- read_html(link)\n\n\nNext, we’ll pass 'page' into the function 'html_nodes' and then into 'html_text' to extract the desired string vector. The text passed through 'html_nodes' must be sourced from the webpage you are scraping from. You can use the ‘inspect’ feature in Google Chrome, or the Chrome extension ‘SelectorGadget’ to find the proper tag to use.\n\n\nCode\nname &lt;- page |&gt; html_nodes(\"h2 a\") |&gt; html_text()\nhex &lt;- page |&gt; html_nodes(\".hx\") |&gt; html_text()\n\n\nOnce that is done, we can take both vectors and create a data frame.\n\n\nCode\ncolors &lt;- data.frame(name, hex, stringsAsFactors = FALSE)\n\n\nIn order to collect each page of data, it is easiest to use a for loop. For this we make a couple of changes. First, we will create an empty data frame titled 'colors' to store data in for each iteration of the loop. Because there are 89 pages, we set the for loop to iterate that many times. We store this as 'page_result' in the loop and change the url to match what is displayed on each page number then use 'paste0' to put them together. Lastly, I added 'rbind' to add the new rows to the 'colors' data frame and a print command to keep track of the loop progress.\n\n\nCode\ncolors &lt;- data.frame()\n\nfor (page_result in 1:89){\n  \n  link &lt;- paste0(\"https://www.color-name.com/search/blue/page/\", page_result)\n  \n  page &lt;- read_html(link)\n  \n  name &lt;- page |&gt; html_nodes(\"h2 a\") |&gt; html_text()\n  hex &lt;- page |&gt; html_nodes(\".hx\") |&gt; html_text()\n  \n  colors &lt;- rbind(colors, data.frame(name, hex, stringsAsFactors = FALSE))\n  \n  print(paste(\"Page:\", page_result))\n}\n\n\nAnd as a last step, I decided to clean up the colors a bit. Even though the search used the key word 'blue', I noticed that the last page displayed colors that did not have the word 'blue' in the title. To fix this, I filtered out any color that did not contain the word.\n\n\nCode\nlibrary(dplyr)\nblues &lt;- colors |&gt; filter(grepl('Blue', name))"
  },
  {
    "objectID": "projects/AcademyHealth Poster/index.html",
    "href": "projects/AcademyHealth Poster/index.html",
    "title": "Academic Posters",
    "section": "",
    "text": "Barriers to Refuse Disposal in Larteh, Ghana\nThis poster was put together as a result of my research experiences in Ghana. This fulfilled my practicum requirement for my MPH program. As of this posting, the research has not been submitted or presented formally.\n\n\n\n\n\n\n\nAcademyHealth Poster: Mental Health and the Pandemic\nThis research was put together in collaboration with Ann Annis and Wenjuan Ma. This poster would not be possible without their dedication and support!"
  },
  {
    "objectID": "projects/Mental Health and the Pandemic/index.html",
    "href": "projects/Mental Health and the Pandemic/index.html",
    "title": "Mental Health and the Pandemic",
    "section": "",
    "text": "Introduction\nThis project was originally a submission to the National Center for Health Statistics and AcademyHealth sponsored Data Visualization Challenge in Fall of 2022.\nThis web application was my first experience building a Shiny application! I found it fascinating to dive into the mechanics of making a usable, interactive web application for data exploration.\nThis project uses data from the Household Pulse Survey as well as data from the Uniform Data System to understand mental illness during the pandemic years. HHP data shows national trends for varying mental illnesses while the UDS data speaks to the experience of patients accessing care at federally qualified health centers throughout the country. We added this data and compared it with poverty rates across U.S. counties (American Community Survey) and mental health provider shortage levels (Area Health Resources Files).\nMy favorite part of this challenge was getting to create large, interactive maps to explore these data.\nWhile the application could be embedded here, it is best viewed in its own window. You can access the app and the full data here."
  },
  {
    "objectID": "posts/opioid plotting practice/index.html",
    "href": "posts/opioid plotting practice/index.html",
    "title": "Opioid Plotting Practice",
    "section": "",
    "text": "Over the summer, I took a course on public health surveillance. As a culminating project, we were tasked with creating original data visualizations for a fact sheet on a topic of our choosing. I chose to examine local opioid overdose and mortality data for my project.\nThis is a topic that is near to me. The opioid crisis has impacted many communities across the country. At this point, the topic is well known to most people. Despite awareness, overdoses are still rising.\nIn the following post, I will demonstrate how easily you can spice up basic ggplot graphics. In particular we will look at:\n\na basic ggplot2 line chart\nggthemes we can use to make a more professional looking figure\nand a brief glimpse at plotly (because interactive graphs are so cool!)"
  },
  {
    "objectID": "posts/opioid plotting practice/index.html#data-prep",
    "href": "posts/opioid plotting practice/index.html#data-prep",
    "title": "Opioid Plotting Practice",
    "section": "Data Prep",
    "text": "Data Prep\nTo begin, we will load in our libraries. Be sure to install them if you haven’t already.\n\nlibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(readxl)\nlibrary(plotly)\n\nNext, we will read in our data using readxl. The data I am using comes from the Michigan Substance Use Disorder Data Repository (SUDDR). You can download the data yourself here. Keep in mind that the numbers we are working with in this example are raw counts of opioid overdose deaths by county, NOT rates. Therefore, we should not compare these counties against each other without considering population size differences. I’m interested in looking at changes over time with this dataset.\nBecause I’m focusing on the three counties in my area, I’m going to create a vector with the names of the capital area counties. This will make subsetting the data a little easier.\n\nopdeaths &lt;- read_xlsx(\"Opioid Overdose Deaths.xlsx\")\n\ncounties &lt;- c(\"Ingham\", \"Eaton\", \"Clinton\")"
  },
  {
    "objectID": "posts/opioid plotting practice/index.html#time-to-plot",
    "href": "posts/opioid plotting practice/index.html#time-to-plot",
    "title": "Opioid Plotting Practice",
    "section": "Time to Plot!",
    "text": "Time to Plot!\nFrom here, we can start our first plot. I will select my target counties using the filter() function that comes from the dplyr package. Be sure to specify which aesthetics you want to plot on the respective axes. Here we are putting the variable Year on the x-axis and Opioid Overdose Deaths on the y.\n\nopdeaths %&gt;%\n  filter(County %in% counties) %&gt;%\n  ggplot(aes(x = Year, y = `Opioids Overdose Deaths`)) +\n  geom_line()\n\n\n\n\nOh no! What happened? We didn’t tell ggplot which lines we wanted to see. It is important that within the layer geom_line() we specify that we want to plot different lines based on our county variable. To do this, we simply add an aes() layer and assign color to County.\n\nopdeaths %&gt;%\n  filter(County %in% counties) %&gt;%\n  ggplot(aes(x = Year, y = `Opioids Overdose Deaths`)) +\n  geom_line(aes(color = County))\n\n\n\n\nThat looks a lot better! But we can do more. The lines look a bit skinny to me. I would like them to stand out more. It also might help to adjust the opacity of the lines. This can make points that cross over easier to read. To make these changes, we can specify linewidth and alpha in geom_line() outside of the aes() argument.\nI think it would be great to add points to our plot, too. Like the geom_line() layer, I want these to be large enough and overlap easily. I will pass through similar arguments in the geom_point() layer, also specifying the color.\n\nopdeaths %&gt;%\n  filter(County %in% counties)  %&gt;%\n  ggplot(aes(x = Year, y = `Opioids Overdose Deaths`)) +\n  geom_line(linewidth = 1, alpha = 0.8, aes(color = County)) +\n  geom_point(size = 2, alpha = 0.8, aes(color = County))\n\n\n\n\nLastly, I want to add labels and theme to really polish up our plot. This is surprisingly easy! To add our labels, we add another layer called labs(). Here we can add a proper title, and more accurate labels for the axes.\nAdding a theme is even easier. We can quickly add on a layer and pick a theme that we like. For my example, I’m using the fivethirtyeight theme that comes from ggthemes. Be sure to check out the other options available in this package.\nAfter our theme_fivethrityeight() layer, I’m adding a general theme() layer to specify that I want all my main title and axes titles to be shown. I am also adjusting the text size to make the title a bit more readable.\n\nopdeaths %&gt;%\n  filter(County %in% counties)  %&gt;%\n  ggplot(aes(x = Year, y = `Opioids Overdose Deaths`)) +\n  geom_line(linewidth = 1, alpha = 0.8, aes(color = County)) +\n  geom_point(size = 2, alpha = 0.8, aes(color = County)) +\n  labs(title = \"Opioid Overdose Deaths in Michigan's Capital Area \\nCounties, 1999 – 2020\",\n       x = \"Year\",\n       y = \"Number of Deaths\") +\n  theme_fivethirtyeight() +\n  theme(plot.title = element_text(size = 16),\n        plot.title.position = \"plot\",\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 11),\n        axis.title.y = element_text(vjust = +3),\n        axis.title.x = element_text(vjust = -0.75),\n        text = element_text(family = \"Georgia\"),\n        plot.margin = unit(c(1, 1, 1, 1), \"lines\"))\n\n\n\n\nAnd just like that, we have a very nice looking line chart!"
  },
  {
    "objectID": "posts/opioid plotting practice/index.html#a-glimpse-of-plotly",
    "href": "posts/opioid plotting practice/index.html#a-glimpse-of-plotly",
    "title": "Opioid Plotting Practice",
    "section": "A Glimpse of Plotly",
    "text": "A Glimpse of Plotly\nNext I want to briefly show how easy it is to take a basic ggplot figure and make it interactive with the amazing package plotly. If I save the figure we created before as an object, we can pass it through the function ggplotly(), and as a result, we get a chart where we can zoom in and hover over points to gain more insight. I will demonstrate this below.\n\np1 &lt;- opdeaths %&gt;%\n  filter(County %in% counties)  %&gt;%\n  ggplot(aes(x = Year, y = `Opioids Overdose Deaths`)) +\n  geom_line(linewidth = 1, alpha = 0.8, aes(color = County)) +\n  geom_point(size = 2, alpha = 0.8, aes(color = County)) +\n  labs(title = \"Opioid Overdose Deaths in Michigan's Capital Area Counties, 1999 – 2020\",\n       x = \"Year\",\n       y = \"Number of Deaths\") +\n  theme_fivethirtyeight() +\n  theme(plot.title = element_text(size = 16),\n        plot.title.position = \"plot\",\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 11),\n        axis.title.y = element_text(vjust = +3),\n        axis.title.x = element_text(vjust = -0.75),\n        text = element_text(family = \"Georgia\"),\n        plot.margin = unit(c(1, 1, 1, 1), \"lines\"))\n\nggplotly(p1)\n\n\n\n\n\nIt’s amazing how quickly you can produce interactive charts with R! The output from this function in an html widget. So it can easily be viewed on a website or a local html file. This makes it ideal for sharing graphics quickly among coworkers.\nFor my project, I created a few more graphics with the same color palette and arranged them on a pdf for easy distribution. If you want to view the finished product you can find that here.\nI hope you found this post helpful. Next time I want to focus more on plotly demonstrating its capabilities with spatial data analysis. Until next time!"
  },
  {
    "objectID": "index.html#blog-highlights",
    "href": "index.html#blog-highlights",
    "title": "Brenden Smith",
    "section": "Blog Highlights",
    "text": "Blog Highlights\n\nBlog post 1\nBlog post 2\nBlog post 3"
  },
  {
    "objectID": "index.html#featured-projects",
    "href": "index.html#featured-projects",
    "title": "Brenden Smith",
    "section": "Featured Projects",
    "text": "Featured Projects\n\nThis div...\n...required...\n...no offset (it’s still in the first row)"
  },
  {
    "objectID": "index.html#recent-blog-posts",
    "href": "index.html#recent-blog-posts",
    "title": "Brenden Smith",
    "section": "Recent Blog Posts",
    "text": "Recent Blog Posts\n\n\n\n\n\n\n\n\n\n\n\n\nTwitter Bots\n\n\n6 min\n\n\n\nR\n\n\ncolor\n\n\nweb-scraping\n\n\n\n\nBrenden Smith\n\n\nMar 1, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMichigan COVID-19 County Maps\n\n\n8 min\n\n\n\nR\n\n\nmaps\n\n\n\n\nBrenden Smith\n\n\nOct 11, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOpioid Plotting Practice\n\n\n6 min\n\n\n\nR\n\n\nggplot2\n\n\n\n\nBrenden Smith\n\n\nOct 9, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#mph-candidate-research-assistant-michigan-state-university-institute-for-health-policy",
    "href": "index.html#mph-candidate-research-assistant-michigan-state-university-institute-for-health-policy",
    "title": "Brenden Smith",
    "section": "MPH Candidate, Research Assistant, Michigan State University, Institute for Health Policy",
    "text": "MPH Candidate, Research Assistant, Michigan State University, Institute for Health Policy\nHello, I’m Brenden. I am an MPH candidate with interests in health equity, harm reduction, and community engagement. I am a data analyst, community researcher, and R enthusiast.\n :::"
  },
  {
    "objectID": "index.html#projects",
    "href": "index.html#projects",
    "title": "Brenden Smith",
    "section": "Projects",
    "text": "Projects\n\n\n\n\n\n\n\n\n\n\nAcademyHealth Poster\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy Tuesday\n\n\n\n\n\n\n\n\n\n\n\n\n\nMichigan COVID-19 Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\n\nMental Health and the Pandemic\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#blog-posts",
    "href": "index.html#blog-posts",
    "title": "Brenden Smith",
    "section": "Blog Posts",
    "text": "Blog Posts\n\n\n\n\n\n\n\n\n\n\nTwitter Bots\n\n\n\nR\n\n\ncolor\n\n\nweb-scraping\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMichigan COVID-19 County Maps\n\n\n\nR\n\n\nmaps\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOpioid Plotting Practice\n\n\n\nR\n\n\nggplot2\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/opioid plotting practice/index.html#introduction",
    "href": "posts/opioid plotting practice/index.html#introduction",
    "title": "Opioid Plotting Practice",
    "section": "",
    "text": "Over the summer, I took a course on public health surveillance. As a culminating project, we were tasked with creating original data visualizations for a fact sheet on a topic of our choosing. I chose to examine local opioid overdose and mortality data for my project.\nThis is a topic that is near to me. The opioid crisis has impacted many communities across the country. At this point, the topic is well known to most people. Despite awareness, overdoses are still rising.\nIn the following post, I will demonstrate how easily you can spice up basic ggplot graphics. In particular we will look at:\n\na basic ggplot2 line chart\nggthemes we can use to make a more professional looking figure\nand a brief glimpse at plotly (because interactive graphs are so cool!)"
  },
  {
    "objectID": "posts/Michigan COVID Cases and Deaths by County/index.html#introduction",
    "href": "posts/Michigan COVID Cases and Deaths by County/index.html#introduction",
    "title": "Michigan COVID-19 County Maps",
    "section": "",
    "text": "This post is intended to demonstrate some basic ways to map data in R. For our example, we will be creating a choropleth map of Michigan’s counties featuring COVID-19 data. The result is something quite similar to the map featured on the state’s dashboard. The data used in this post is from October 4, 2022.\nFor the sake of practice, we will walk through two different ways to go about this process. First we will use ggplot2. We will use a function called map_data to pull in shape file data easily. In our second example, we will use leaflet to create a better looking version of this map and use a raw shape file."
  },
  {
    "objectID": "posts/HM878: Helper Functions/index.html",
    "href": "posts/HM878: Helper Functions/index.html",
    "title": "HM878: Helper Functions",
    "section": "",
    "text": "This vignette demonstrates how to use the functions included in this package so far. If you have not yet, install the package with the following code: devtools::install_github(\"brendensm/hm878\"). If you do not have the package devtools, be sure to install that first install.packages(\"devtools\").\nTo start, we load the package\n\nlibrary(hm878)\n\nLet’s assume we are running a binomial logistic regression using the data from mtcars, a built-in data set included with R. We will use vs (engine type as V-shaped or straight) as the dependent variable, and cyl (number of cylinders) as the independent variable. We will store our models for block 1 and block 2.\n\nmb1 &lt;- glm(vs ~ 1, data = mtcars, family = \"binomial\")\nmb2 &lt;- glm(vs ~ cyl, data = mtcars, family = \"binomial\")\n\n\n\nTo assess the fit of our models, we may want to use the function chi_log. To use it, simply type in the name of your model as the first argument, followed by the data set that the model uses. Optionally, you can provide labels for each model using the third argument. Here I will label each block.\n\nchi_log(mb1, mtcars, \"Block 1\")\n\nPearson Goodness of Fit Test\n\n Null Hypothesis: The model fits\n Alternative Hypothesis: the model does not fit\n\n Pearson chi-squared for  Block 1:  32 \n Degrees of freedom for  Block 1:  31 \n P-value for  Block 1:  0.416744 \n\nchi_log(mb2, mtcars, \"Block 2\")\n\nPearson Goodness of Fit Test\n\n Null Hypothesis: The model fits\n Alternative Hypothesis: the model does not fit\n\n Pearson chi-squared for  Block 2:  27.42 \n Degrees of freedom for  Block 2:  30 \n P-value for  Block 2:  0.6013516 \n\n\nThe function gives us the chi-squared statistic, degrees of freedom, and a p-value. It also reminds us of the null and alternative hypotheses. Both models appear to be a good fit.\n\n\n\nWe may want to also check the accuracy of our models. To do this, we can use predict_percent. To use this function, enter the name of the model in the first argument, followed by the dependent variable we used in the model. For this, we must use the data$variable format. In the example below, we use the variable vs from the data set mtcars. Once again, we can label the output with a string as the optional third argument.\n\npredict_percent(mb1, mtcars$vs, \"Block 1\")\n\nAccuracy for Block 1: 56.25%\n\npredict_percent(mb2, mtcars$vs, \"Block 2\")\n\nAccuracy for Block 2: 84.38%\n\n\n\n\n\nTo calculate odds ratios for the models, simply pass the model through the function or.\n\nor(mb1)\n\n            Odds_Ratio  CI_Lower CI_Upper  p_values\n(Intercept)  0.7777778 0.3801366 1.558936 0.4806496\n\nor(mb2)\n\n              Odds_Ratio    CI_Lower     CI_Upper    p_values\n(Intercept) 10873.447296 95.35600799 6.507716e+07 0.002692584\ncyl             0.204474  0.04827075 4.455527e-01 0.001917098\n\n\nThe output results in a data frame with the odds ratios, confidence intervals, and p-values.\n\n\n\nIf you want to revise and adjust your model, it can be helpful to limit outliers. To find upper and lower fences quickly, use the function fences. To do this, pass the continuous variable you are interested in examining through the function. Once again, use the format data$variable.\n\nfences(mtcars$cyl)\n\n Lower Fence: -2 \n Upper Fence: 14\n\n\n\n\n\nLastly, when you are putting together multiple models, it can be helpful to view them all at the same time, next to one another. This is particularly helpful if you have more than two models you are comparing. For this function, pass through however many models you have to compare, and optionally label each one, using a vector of strings for each model. To demonstrate, I will add on another model mb3 that will have another continuous independent variable.\n\nmb3 &lt;- glm(vs ~ cyl + wt, data = mtcars, family = \"binomial\")\n\ncompare_models(mb1, mb2, mb3, labels = c(\"Model 1 Block 1\", \"Model 1 Block 2\", \"Model Block 3\"))\n\n$`Model 1 Block 1`\n\nCall:  glm(formula = vs ~ 1, family = \"binomial\", data = mtcars)\n\nCoefficients:\n(Intercept)  \n    -0.2513  \n\nDegrees of Freedom: 31 Total (i.e. Null);  31 Residual\nNull Deviance:      43.86 \nResidual Deviance: 43.86    AIC: 45.86\n\n$`Model 1 Block 2`\n\nCall:  glm(formula = vs ~ cyl, family = \"binomial\", data = mtcars)\n\nCoefficients:\n(Intercept)          cyl  \n      9.294       -1.587  \n\nDegrees of Freedom: 31 Total (i.e. Null);  30 Residual\nNull Deviance:      43.86 \nResidual Deviance: 17.96    AIC: 21.96\n\n$`Model Block 3`\n\nCall:  glm(formula = vs ~ cyl + wt, family = \"binomial\", data = mtcars)\n\nCoefficients:\n(Intercept)          cyl           wt  \n     10.619       -2.931        2.100  \n\nDegrees of Freedom: 31 Total (i.e. Null);  29 Residual\nNull Deviance:      43.86 \nResidual Deviance: 15.55    AIC: 21.55"
  },
  {
    "objectID": "posts/HM878: Helper Functions/index.html#testing-goodness-of-fit-with-chi_log",
    "href": "posts/HM878: Helper Functions/index.html#testing-goodness-of-fit-with-chi_log",
    "title": "HM878: Helper Functions",
    "section": "",
    "text": "To assess the fit of our models, we may want to use the function chi_log. To use it, simply type in the name of your model as the first argument, followed by the data set that the model uses. Optionally, you can provide labels for each model using the third argument. Here I will label each block.\n\nchi_log(mb1, mtcars, \"Block 1\")\n\nPearson Goodness of Fit Test\n\n Null Hypothesis: The model fits\n Alternative Hypothesis: the model does not fit\n\n Pearson chi-squared for  Block 1:  32 \n Degrees of freedom for  Block 1:  31 \n P-value for  Block 1:  0.416744 \n\nchi_log(mb2, mtcars, \"Block 2\")\n\nPearson Goodness of Fit Test\n\n Null Hypothesis: The model fits\n Alternative Hypothesis: the model does not fit\n\n Pearson chi-squared for  Block 2:  27.42 \n Degrees of freedom for  Block 2:  30 \n P-value for  Block 2:  0.6013516 \n\n\nThe function gives us the chi-squared statistic, degrees of freedom, and a p-value. It also reminds us of the null and alternative hypotheses. Both models appear to be a good fit."
  },
  {
    "objectID": "posts/HM878: Helper Functions/index.html#accuracy-percentage-with-predict_percent",
    "href": "posts/HM878: Helper Functions/index.html#accuracy-percentage-with-predict_percent",
    "title": "HM878: Helper Functions",
    "section": "",
    "text": "We may want to also check the accuracy of our models. To do this, we can use predict_percent. To use this function, enter the name of the model in the first argument, followed by the dependent variable we used in the model. For this, we must use the data$variable format. In the example below, we use the variable vs from the data set mtcars. Once again, we can label the output with a string as the optional third argument.\n\npredict_percent(mb1, mtcars$vs, \"Block 1\")\n\nAccuracy for Block 1: 56.25%\n\npredict_percent(mb2, mtcars$vs, \"Block 2\")\n\nAccuracy for Block 2: 84.38%"
  },
  {
    "objectID": "posts/HM878: Helper Functions/index.html#calculating-odds-ratios-with-or",
    "href": "posts/HM878: Helper Functions/index.html#calculating-odds-ratios-with-or",
    "title": "HM878: Helper Functions",
    "section": "",
    "text": "To calculate odds ratios for the models, simply pass the model through the function or.\n\nor(mb1)\n\n            Odds_Ratio  CI_Lower CI_Upper  p_values\n(Intercept)  0.7777778 0.3801366 1.558936 0.4806496\n\nor(mb2)\n\n              Odds_Ratio    CI_Lower     CI_Upper    p_values\n(Intercept) 10873.447296 95.35600799 6.507716e+07 0.002692584\ncyl             0.204474  0.04827075 4.455527e-01 0.001917098\n\n\nThe output results in a data frame with the odds ratios, confidence intervals, and p-values."
  },
  {
    "objectID": "posts/HM878: Helper Functions/index.html#upper-and-lower-fences-with-fences",
    "href": "posts/HM878: Helper Functions/index.html#upper-and-lower-fences-with-fences",
    "title": "HM878: Helper Functions",
    "section": "",
    "text": "If you want to revise and adjust your model, it can be helpful to limit outliers. To find upper and lower fences quickly, use the function fences. To do this, pass the continuous variable you are interested in examining through the function. Once again, use the format data$variable.\n\nfences(mtcars$cyl)\n\n Lower Fence: -2 \n Upper Fence: 14"
  },
  {
    "objectID": "posts/HM878: Helper Functions/index.html#comparing-model-results-with-compare_models",
    "href": "posts/HM878: Helper Functions/index.html#comparing-model-results-with-compare_models",
    "title": "HM878: Helper Functions",
    "section": "",
    "text": "Lastly, when you are putting together multiple models, it can be helpful to view them all at the same time, next to one another. This is particularly helpful if you have more than two models you are comparing. For this function, pass through however many models you have to compare, and optionally label each one, using a vector of strings for each model. To demonstrate, I will add on another model mb3 that will have another continuous independent variable.\n\nmb3 &lt;- glm(vs ~ cyl + wt, data = mtcars, family = \"binomial\")\n\ncompare_models(mb1, mb2, mb3, labels = c(\"Model 1 Block 1\", \"Model 1 Block 2\", \"Model Block 3\"))\n\n$`Model 1 Block 1`\n\nCall:  glm(formula = vs ~ 1, family = \"binomial\", data = mtcars)\n\nCoefficients:\n(Intercept)  \n    -0.2513  \n\nDegrees of Freedom: 31 Total (i.e. Null);  31 Residual\nNull Deviance:      43.86 \nResidual Deviance: 43.86    AIC: 45.86\n\n$`Model 1 Block 2`\n\nCall:  glm(formula = vs ~ cyl, family = \"binomial\", data = mtcars)\n\nCoefficients:\n(Intercept)          cyl  \n      9.294       -1.587  \n\nDegrees of Freedom: 31 Total (i.e. Null);  30 Residual\nNull Deviance:      43.86 \nResidual Deviance: 17.96    AIC: 21.96\n\n$`Model Block 3`\n\nCall:  glm(formula = vs ~ cyl + wt, family = \"binomial\", data = mtcars)\n\nCoefficients:\n(Intercept)          cyl           wt  \n     10.619       -2.931        2.100  \n\nDegrees of Freedom: 31 Total (i.e. Null);  29 Residual\nNull Deviance:      43.86 \nResidual Deviance: 15.55    AIC: 21.55"
  }
]