{
  "hash": "972026ca169ee05008dac10a4cec43a8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"What's New in CDCPLACES 1.1.5\"\nauthor: \"Brenden Smith\"\ndate: \"2024-3-19\"\ncategories: [R, packages, API, vignette, maps]\ndescription: \"Map PLACES data easily with the help of `tigris`.\"\nengine: knitr\nexecute: \n  warning: false\n  eval: true\n#image: vt.png\ncode-fold: show\ncode-overflow: scroll\ntoc: true\n---\n\n\n*An earlier version of this blog post was published on February 6, 2024 and described the new features in the development version of this package. This update shows all of the new features of the package as of March 16, 2024.*\n\n## Introduction\n\n`CDCPLACES` version 1.1.5 is now available on CRAN. Users can now request an sf data frame to allow for simple, streamlined mapping of PLACES data. To use this new feature, be sure to install the latest version from CRAN or GitHub.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install the latest development version\n# devtools::install_github(\"brendensm/CDCPLACES\")\n\n# Or from CRAN\n# install.packages(\"CDCPLACES\")\n\nlibrary(CDCPLACES)\nlibrary(ggplot2)\nlibrary(dplyr)\n```\n:::\n\n\n## New argument `geometry`\n\nFirst we need to query our data. To include our shape file, we need to specify the argument `geometry` as \"TRUE\". For our first example we will look at the percentage of adults sleeping less than 7 hours in Michigan Counties.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmi <- get_places(state = \"MI\", \n                 measure = \"SLEEP\", \n                 geometry = TRUE)\n```\n:::\n\n\nNow we can take this dataset and immediately plot the spatial data with `ggplot2`. I will also add a nicer looking color palette and the percentage scale in `scale_fill_viridis_c`, as well as a title with the function `labs`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmi |> \n  filter(datavaluetypeid == \"AgeAdjPrv\") |> \n  ggplot(aes(fill = data_value)) +\n  geom_sf() +\n  scale_fill_viridis_c(labels = scales::percent_format(scale = 1)) +\n  theme_void() +\n  labs(title = mi$measure) +\n  theme(plot.title.position = \"plot\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nWe can do the same for census level data. This is as simple as specifying our geography to \"census\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvt <- get_places(geography = \"census\", \n                 state = \"VT\", \n                 measure = \"SLEEP\", \n                 geometry = TRUE)\n```\n:::\n\n\nThen we can map it just the same.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvt |> \n  ggplot(aes(fill = data_value)) +\n  geom_sf() +\n  scale_fill_viridis_c(labels = scales::percent_format(scale = 1)) +\n  theme_void() +\n  labs(title = vt$measure) +\n  theme(plot.title.position = \"plot\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## Query by County\n\nThis update also allows for the user to query specific counties using the argument `county`. In the example below, we can specify the state and counties we want to plot with simple syntax.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncap_county <- get_places(geography = \"census\", \n                         state = \"MI\", \n                         measure = \"ACCESS2\", \n                         county = c(\"Ingham\", \"Eaton\", \"Clinton\"), \n                         geometry = TRUE)\n```\n:::\n\n\nOnce this is done, we can plot our data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncap_county |> \n  ggplot(aes(fill = data_value)) +\n  geom_sf() +\n  scale_fill_viridis_c(labels = scales::percent_format(scale = 1)) +\n  theme_void() +\n  labs(title = cap_county$measure) +\n  theme(plot.title.position = \"plot\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## Acknowledgements\n\nThese features would not be possible without the excellent work of Kyle Walker's package `tigris`. The contributions he has made to the R community have been incredibly inspiring to me. His other package, `tidycensus` was the inspiration for this entire pacakge. To see his work visit his website [here.](https://walker-data.com/)\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}