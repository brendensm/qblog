{
  "hash": "11dbb71c27e946946b108a0b87e38268",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Interactive Map Filter in Shiny\"\nauthor: \"Brenden Smith\"\ndate: \"2024-6-26\"\ncategories: [R, maps]\ndescription: \"\"\nengine: knitr\nexecute: \n  warning: false\n  eval: false\ncode-fold: show\ncode-overflow: scroll\ntoc: true\ntitle-block-banner: true\nlightbox: true\n---\n\n\n## Introduction\n\nRecently, I participated in [Posit's 2024 Table Contest](https://posit.co/blog/announcing-the-2024-table-contest/). For my submission, [which you can view here](https://forum.posit.co/t/michigan-substance-use-vulnerability-index-mi-suvi-exploration-table-table-contest/188198), I included a leaflet map that acts as a filter in Shiny. This is a cool, dashboard-like feature similar to what you might find in Power BI. I recreated this effect and learned a bit through the process.\n\nI first saw this wonderful [blog post by Nathan Day](https://www.natedayta.com/2019/05/05/an-inputmap-for-your-shiny-app/) but realized didn't exactly match the feel I was going for. I adapted his code and added my own preferences (specifically allowing the input map to select multiple polygons and resetting the output table when polygons were \"unclicked\"). I wanted to share a basic example for others who might want to try this out!\n\n![](images/demo.gif)\n\n## Example Data\n\nThe data I will be using for this example can be queried using the `CDCPLACES` package ([see more on GitHub](https://github.com/brendensm/CDCPLACES)). I will take a sample of county data from the State of Ohio. Here I am filtering only the age-adjusted rates and the measure \"ACCESS2\" which is the percentage of the population aged 18-64 that lack health insurance. I will also set the CRS for the data using `sf::st_transform` to avoid warnings when the data is queried.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(leaflet)\nlibrary(shiny)\nlibrary(CDCPLACES)\nlibrary(dplyr)\n\nohio <- get_places(state = \"OH\", measure = \"ACCESS2\", geometry = TRUE) |>\n  filter(datavaluetypeid == \"AgeAdjPrv\") |>\n  select(year, stateabbr, locationname, measure, data_value, geometry) |> \n  sf::st_transform(crs = 4326)\n```\n:::\n\n\n## UI\n\nNext, we can get into the UI side of our demo app. This is fairly straightforward. We initiate a fluid page, a title, and a sidebar layout. The sidebar has our leaflet map as a filter. In the main panel, we will output a data table.\n\nI have added a `tags$head` function to add some custom CSS to the app. This is an optional step, but these two options make the panel transparent, which I think adds a lot to the look and feel of the app.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(\n\n  tags$head(\n    tags$style(HTML(\".leaflet-container { background: none; } \n                    .well { background: none;}\"))\n  ),\n\n    titlePanel(\"My Demo App\"),\n\n    sidebarLayout(\n        sidebarPanel(\n            leafletOutput(\"mapfilter\", height = 250)\n        ),\n\n        mainPanel(\n           DT::DTOutput(\"table\")\n        )\n    )\n)\n```\n:::\n\n\n## Server\n\nNow we can specify the logic of the server to get the result we want. To start we can initialize a few reactive values. This will allow us to update our filtered data and what is displayed on the map. `selected_counties` will correspond to what is highlighted on the map when we click, `filtered_data` will be the data frame that is displayed on the main table output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nserver <- function(input, output, session) {\n      # Initialize reactive values\n     rv <- reactiveValues(selected_counties = NULL,\n                        filtered_data = ohio) # Initialize reactive values\n}\n```\n:::\n\n\n::: callout-note\nThe following code chunks are wrapped within the `server` function call.\n:::\n\n### Outputs\n\nThis section will briefly describe the functions for our outputs: the map filter and the table.\n\n#### Table\n\nThis chunk defines the output corresponding to the id `table`, and renders a datatable. We input the reactive value of our filtered data with `rv$filtered_data`, remove the geometry with `sf::st_set_geometry(NULL)`, and send it to `DT::datatable()` for a simple table display.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  output$table <- DT::renderDT({\n\n      rv$filtered_data |>\n        sf::st_set_geometry(NULL) |>\n        DT::datatable()\n\n    })\n```\n:::\n\n\n#### Map\n\nFor our map, we follow similar steps. We use the base data frame `ohio` to create our map. Future steps will show how we update this with our click behavior. `highlightOptions` here defines how the map reacts to hovering over polygons. It will fill the county the mouse is hovering over.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  output$mapfilter <- renderLeaflet({ # rendering the filter map\n\n    leaflet(ohio, # initializing the map\n            options = leafletOptions( \n              zoomControl = FALSE,\n              dragging = FALSE,\n              minZoom = 6,\n              maxZoom = 6\n            )) |>  # then add polygons\n    addPolygons(layerId = ~locationname,\n                  label = ~locationname,\n                  col = \"black\",\n                  fillColor = \"steelblue\",\n                  weight = 2,\n                  fillOpacity = .1,\n                  highlight = highlightOptions(\n                    fillOpacity = 1,\n                    bringToFront = TRUE\n                  ))\n\n  })\n```\n:::\n\n\n### Click Behavior\n\nNext, we will define our behavior when the map is clicked. We can break this into two parts, updating the data that is fed into the output table, and changing the display of the input map.\n\nThe code chunk below runs when a polygon on our map is clicked. That is the logic of the `observeEvent` function and its argument `input$mapfilter_shape_click`. Because our actions all relate to this event, we can wrap all of our code in it. The other step here is to store the input in an object called `click`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  observeEvent(input$mapfilter_shape_click, { \n    # this is the logic behind the \"click\" of the map.\n    \n        click <- input$mapfilter_shape_click\n\n  })\n```\n:::\n\n\nIf we were to simply `print(click)` we would see the following output upon an initial click and a second click of the same polygon:\n\n::: {.panel-tabset}\n\n## Initial Click\n\n![](images/firstclick.jpg){height=\"250\"}\n\n\n## Second Click\n\n![](images/selected.jpg){height=\"250\"}\n\n\n:::\n\nThis will inform how we use the input to update our data and map.\n\nWe can use a set of `if` and `else` statements to store  data from click in our reactive values.\n\n-   The first statement checks to see if the current `click$id` exists in `rv$selected_counties`. If it does, it will remove it from the vector.\n\n-   The next statement checks to see if the `click$id` is equal to \"selected\". Recall that this occurs when the same polygon is selected twice in a row. If this condition is met, we will filter `rv$selected_counties` by removing the last value in the length of the vector.\n\n-   Lastly, if the other two conditions are not met, the new and unique `click$id` is added to `rv$selected_counties`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n      if (click$id %in% rv$selected_counties) {\n        # If selected, remove it\n        rv$selected_counties <- \n          rv$selected_counties[rv$selected_counties != click$id]\n        \n      } else if(click$id == \"selected\"){ \n        # when a county is clicked again it is removed\n\n        rv$selected_counties <- \n          rv$selected_counties[rv$selected_counties !=\n                                 tail(rv$selected_counties, n = 1)]\n\n      }else { # If not selected, add it\n        rv$selected_counties <- c(rv$selected_counties, click$id)\n        \n      }\n```\n:::\n\n\nThen we have an update to our map. We can accomplish this with `leafletProxy`. We will simply add an `ifelse` function to the argument `fillOpacity`. This ensures that counties present in our `rv$selected_counties` will have the proper fill.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n      leafletProxy(\"mapfilter\", session) |>\n        addPolygons(data = ohio,\n                    layerId = ~locationname,\n                    label = ~locationname,\n                    fillColor = \"steelblue\", \n                    col = \"black\",\n                    weight = 2,\n                    fillOpacity = ifelse(\n                      ohio$locationname %in% rv$selected_counties, 1, 0.1\n                      ),\n                    highlight = highlightOptions(\n                      fillOpacity = 1,\n                      bringToFront = TRUE)\n                    )\n```\n:::\n\n\nEach of these pieces all fit into our `observeEvent` function for a click on the map, so in our consolidated code it will look like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  observeEvent(input$mapfilter_shape_click, { \n\n    click <- input$mapfilter_shape_click\n\n      if (click$id %in% rv$selected_counties) {\n        rv$selected_counties <- \n          rv$selected_counties[rv$selected_counties != click$id]\n      } else if(click$id == \"selected\"){ \n        rv$selected_counties <- \n          rv$selected_counties[rv$selected_counties !=\n                                 tail(rv$selected_counties, n = 1)]\n\n      }else {\n        rv$selected_counties <- c(rv$selected_counties, click$id)\n      }\n\n      leafletProxy(\"mapfilter\", session) |>\n        addPolygons(data = ohio,\n                    layerId = ~locationname,\n                    label = ~locationname,\n                    fillColor = \"steelblue\", \n                    col = \"black\",\n                    weight = 2,\n                    fillOpacity = ifelse(\n                      ohio$locationname %in% rv$selected_counties, 1, 0.1\n                      ),\n                    highlight = highlightOptions(\n                      fillOpacity = 1,\n                      bringToFront = TRUE)\n                    )\n\n  })\n```\n:::\n\n\nLastly, we have one more `if else` statement in our server. The following code chunk takes the reactive value `rv$selected_counties` and updates `rv$filtered_data` which we use to render the table. This logic will cause the data to reset when we have no selected counties (all the shapes are \"unclicked\").\n\n\n::: {.cell}\n\n```{.r .cell-code}\n    observe({ # Update table filtering based on selected counties\n      if (!is.null(rv$selected_counties) && \n          length(rv$selected_counties) > 0) { \n        # Check if any counties are selected\n        rv$filtered_data <- ohio |>\n                        filter(locationname %in% rv$selected_counties)\n      } else {\n        rv$filtered_data <- ohio\n      }\n    })\n```\n:::\n\n\n## Conclusion\n\nThis post was an excellent way for me to revisit my code and share an interesting and unique Shiny feature. In this process I ended up eliminating quite a few redundancies in my original code and reinforced some of the concepts of reactivity showcased here.\n\nI hope you find this tutorial useful. If you put it to use, please share it with me! I would love to see the work you come up with.\n\nSee the full consolidated example code below.\n\n## Full Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(leaflet)\nlibrary(shiny)\nlibrary(tigris)\nlibrary(CDCPLACES)\nlibrary(dplyr)\nlibrary(htmltools)\n\nohio <- get_places(state = \"OH\", measure = \"ACCESS2\", geometry = TRUE) |>\n  filter(datavaluetypeid == \"AgeAdjPrv\") |>\n  select(year, stateabbr, locationname, measure, data_value, geometry) |>\n  sf::st_transform(crs = 4326)\n\n\nui <- fluidPage(\n\n  tags$head(\n    tags$style(HTML(\".leaflet-container { background: none; } .well { background: none;}\"))\n  ),\n\n    # Application title\n    titlePanel(\"My Demo App\"),\n\n    # Sidebar with a slider input for number of bins\n    sidebarLayout(\n        sidebarPanel(\n            leafletOutput(\"mapfilter\", height = 250)\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           DT::DTOutput(\"table\")\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output, session) {\n\n   rv <- reactiveValues(selected_counties = NULL,\n                        filtered_data = ohio) # Initialize reactive value for selected counties\n\n  observeEvent(input$mapfilter_shape_click, { # this is the logic behind the \"click\" of the map.\n\n    click <- input$mapfilter_shape_click\n\n    ########## map behavior ################\n      # If a county is clicked\n\n      if (click$id %in% rv$selected_counties) {\n        # If selected, remove it\n        rv$selected_counties <- rv$selected_counties[rv$selected_counties != click$id]\n      } else if(click$id == \"selected\"){ # when a county is clicked again it is removed\n\n        rv$selected_counties <- rv$selected_counties[rv$selected_counties != tail(rv$selected_counties, n = 1)]\n\n      }else {\n        # If not selected, add it\n        rv$selected_counties <- c(rv$selected_counties, click$id)\n      }\n\n      leafletProxy(\"mapfilter\", session) |>\n        addPolygons(data = ohio,\n                    layerId = ~locationname,\n                    label = ~locationname,\n                    fillColor = \"steelblue\", # Change fill color based on selection\n                    col = \"black\",\n                    weight = 2,\n                    fillOpacity = ifelse(ohio$locationname %in% rv$selected_counties, 1, 0.1),\n                    highlight = highlightOptions(\n                      fillOpacity = 1,\n                      bringToFront = TRUE)\n                    )\n\n\n  })\n\n  output$mapfilter <- renderLeaflet({ # rendering the filter map\n\n    leaflet(ohio,\n            options = leafletOptions( # initializing the map\n              zoomControl = FALSE,\n              dragging = FALSE,\n              minZoom = 6,\n              maxZoom = 6\n            )) %>%\n      addPolygons(layerId = ~locationname,\n                  label = ~locationname,\n                  #   fillColor = \"black\",\n                  col = \"black\",\n                  fillColor = \"steelblue\",\n                  weight = 2,\n                  fillOpacity = .1,\n                  highlight = highlightOptions(\n                    fillOpacity = 1,\n                    bringToFront = TRUE\n                  ))\n\n  })\n\n    output$table <- DT::renderDT({\n\n      rv$filtered_data |>\n        sf::st_set_geometry(NULL) |>\n        DT::datatable()\n\n    })\n\n    observe({ # Update table filtering based on selected counties\n      if (!is.null(rv$selected_counties) & length(rv$selected_counties) > 0) { # Check if any counties are selected\n        rv$filtered_data <- ohio |>\n                        filter(locationname %in% rv$selected_counties)\n      } else {\n        rv$filtered_data <- ohio\n      }\n    })\n\n}\n\n# Run the application\nshinyApp(ui = ui, server = server)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}