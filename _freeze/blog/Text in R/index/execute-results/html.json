{
  "hash": "ae975f569b0a040527da7152d836abcd",
  "result": {
    "markdown": "---\ntitle: \"I Made R Text For Me\"\nauthor: \"Brenden Smith\"\ndate: \"2024-3-23\"\ncategories: [R, Command line]\ndescription: \"Do you ever wish that text message would just send itself?\"\nengine: knitr\nexecute: \n  warning: false\n  eval: true\nimage: R-text.png\ncode-fold: show\ncode-overflow: scroll\ntoc: true\ntitle-block-banner: true\n---\n\n\n## Introduction\n\nUp front, I have problems with procrastination. The last few years in graduate school have made me prioritize certain things MUCH better. However, in my personal life, I still struggle. I continue to put off things that I would rather do later. A prime example of this is my role as utility-bill-payer in my current living situation.\n\nIt is my duty to pay our house's gas, internet, trash, and electric/water bills every month. I am reliable enough for this (especially with the convenience of automatic payments). My struggle is the monthly task of rounding up these payments, calculating the totals owed by my respective roommates, and the herculean task of texting them the breakdown for the month. Lately, I have been contemplating fun, useful projects to work on using the beauty of programming languages and I realized this is the perfect thing to do.\n\nThe plan? Make this process as easy as possible for me. With a little trial and error, I've done it.\n\nThis project consists of:\n\n-   A spreadsheet to store the monthly breakdown of utility payments (unfortunately, this still has to be done by hand).\n\n-   An R script to pull this spreadsheet in and send a custom text message that uses the most recent month's total and roommate share amount (along with a breakdown of each bill amount).\n\n-   A method to automatically run this process without any reliability on my behalf (insert cron jobs).\n\n## The Spreadsheet\n\nThis was a task I already had mostly completed. At the beginning of this year, I created a very basic spreadsheet in Google Sheets to track my utility bills. One table consists of the data in a tidy format, including columns for the month, bill type, amount, and date paid. A second table creates a sum from the first table giving the date to notify (the first of the month after the month in which the bill was paid), the total amount, and the amount owed by the roommate (one-third split on the total).\n\nBecause each bill comes from a different place and my email isn't easily accessible to a programming language, I still have to update this spreadsheet by hand whenever I am notified of a payment. And for my purposes, I was ok with this!\n\n## R Script\n\nThe script for this project has three main tasks:\n\n1.  Import the data from Google Sheets.\n\n2.  Create the text of the message.\n\n3.  Send the text message.\n\n### Getting the Data\n\nFirst, we can call the libraries we will need.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(googlesheets4)\nlibrary(dplyr)\n```\n:::\n\n\nThe package `googlesheets4` made this project incredibly easy.\n\nYou can connect to your Google account using `gs4_auth`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngs4_auth(email = \"your email here\")\n```\n:::\n\n\nThen, you can import your sheet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read_sheet(\"your_url_here\")\n```\n:::\n\n\nTo demonstrate what my data looked like, I will create a demo data set to work with in this example.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmonth <- c(\"Feb\", \"Feb\", \"Feb\", \"Mar\", \"Mar\", \"Mar\")\n\nbill_type <- c(\"Gas\", \"Water\", \"Internet\", \"Gas\", \"Water\", \"Internet\")\n\namount <- c(50, 62, 25, 55, 70, 25)\n\ndue_date <- c(\"2/1/2024\", \"2/4/2024\", \"2/5/2024\", \n              \"3/1/2024\", \"3/5/2024\", \"3/6/2024\")\n\ntable1 <- data.frame(month, bill_type, amount, due_date) |> \n  mutate(due_date = lubridate::mdy(due_date))\n\ntable1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  month bill_type amount   due_date\n1   Feb       Gas     50 2024-02-01\n2   Feb     Water     62 2024-02-04\n3   Feb  Internet     25 2024-02-05\n4   Mar       Gas     55 2024-03-01\n5   Mar     Water     70 2024-03-05\n6   Mar  Internet     25 2024-03-06\n```\n:::\n\n```{.r .cell-code}\ntable2.1<- table1 |> \n  summarise(.by = month,\n            total = sum(amount),\n            third = total/3) \n\nnotify <- c(\"3/1/2024\", \"4/1/2024\")\n\ntable2.2 <- data.frame(notify) |> \n  mutate(notify = lubridate::mdy(notify))\n\ntable2 <- cbind(table2.1, table2.2)\ntable2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  month total    third     notify\n1   Feb   137 45.66667 2024-03-01\n2   Mar   150 50.00000 2024-04-01\n```\n:::\n:::\n\n\n### Creating the Message\n\nBecause my real data has all of the month's data in it, we need to filter to get the right amounts to send in our text. We can use `Sys.Date` to get the current date, and `lubridate::month` to make the date a numeric value representing the month.\n\nThen we can do the same for our tables to filter by. Remember I will have this script executing at the first of every month to report what the costs were for the previous month.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# current_month <- lubridate::month(Sys.Date())\ncurrent_month <- 4 # for our example\n\nfiltered_sum <- table2 |> \n  mutate(notify = lubridate::month(notify)) |> \n  filter(notify == current_month)\n\nmonthly_total <- filtered_sum$total\n\nthird <- filtered_sum$third\n\nbreakdown <- table1 |> \n  mutate(month_num = lubridate::month(due_date)) \n\nbreakdown_amounts <- breakdown |> \n  filter(month_num == (current_month - 1)) |> \n  select(bill_type, amount)\n```\n:::\n\n\nNow that we have the amounts we need, we can construct a message.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n message <- paste(\"The total of our utility bill for the month of\", \n                  filtered_sum$month, \"is:\", monthly_total, \n                  \"\\nA third of this total is:\", round(third, 2), \n                   \"\\n\\nHere is a breakdown of the bill:\",\n                   paste0(\"\\n\", breakdown_amounts[1,1], \": \",\n                     breakdown_amounts[1,2], \"\\n\",\n                     breakdown_amounts[2,1], \": \",\n                     breakdown_amounts[2,2], \"\\n\",\n                     breakdown_amounts[3,1], \": \",\n                     breakdown_amounts[3,2]\n                   )\n )\n\ncat(message)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe total of our utility bill for the month of Mar is: 150 \nA third of this total is: 50 \n\nHere is a breakdown of the bill: \nGas: 55\nWater: 70\nInternet: 25\n```\n:::\n:::\n\n\n### Sending the Message\n\nNext, we text.\n\nThe method I am using is **only for iMessage devices,** and is really only possible from a Mac. This method is taken from a very helpful [Stackoverflow post.](https://stackoverflow.com/questions/6543070/send-a-text-message-from-r) There is probably a workaround for other devices and sending through SMS, but that is not the focus of this post.\n\nWe can send our text with an Apple Script. Here is a function to do just that. This is slightly adapted from the Stackoverflow answer and allows for separate texts to multiple recipients.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsend_text <- function(message, buddy){\n  \n  for(i in buddy){\n    system(paste('osascript -e \\'tell application \"Messages\"\\' -e \\'send \"', message, '\" to buddy', i,  'of (service 1 whose service type is iMessage)\\' -e \\'end tell\\''))\n  }\n  \n}\n```\n:::\n\n\nThen we can simply plug in the rest. But be warned: running this command will send a text! Be careful when testing this out.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuddies <- c(\"\\\"phonenumber1\\\"\", \"\\\"phonenumber2\\\"\")\n\nsend_text(message, buddies)\n```\n:::\n\n\n## The Cron Job\n\nNow that the hard part is over, we can simply create a cron job to run this script directly from the command line on the first of every month.\n\n**Important: make sure the following is at the top of your saved R script:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#!/usr/local/bin/Rscript\n```\n:::\n\n\nTo open your cron tab, in the terminal type the following command:\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\nexport VISUAL=nano; crontab -e\n```\n:::\n\n\nAs an added tip, you can save this command as an alias in your .zshrc file to make it easier to quickly access.\n\nOnce the cron tab is open, you have to set up the job and specify how often you want it to run. The following runs on the first of every month at 9 AM. The command navigates to my home directory, and then executes my R script which I have named \"utes_notif.R\".\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\n0 9 1 * * cd ~; ./Desktop/R/utility_notification/utes_notif.R\n```\n:::\n\n\n## Other Considerations\n\nLastly, I want to note a small consideration when setting up an automated process like this. The cron job will run in this form only if the computer is awake during the scheduled time.\n\nTo work around this, you can utilize the battery options in your Mac's system preferences. I have scheduled my computer to wake up every day at 9 AM for about five minutes. This was the easiest work around for me. However, I am certain there are other options to achieve the same goal. One option may be to use alternative scheduling tools like cronwake or anacron.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}