{
  "hash": "23ec979bd86d5637622296b1c884fc10",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"CDCPLACES 1.1.8: 2024 Release\"\nauthor: \"Brenden Smith\"\ndate: \"2024-8-12\"\ncategories: [R, packages, maps, CDCPLACES]\ndescription: \"New measures, query ZCTAs, and filter by category.\"\nimage: screenshots/places.png\nimage-height: 100px\nengine: knitr\nexecute: \n  warning: false\n  eval: true\n  message: false\ncode-fold: show\ncode-overflow: scroll\ntoc: true\ntitle-block-banner: true\nlightbox: true\neditor_options: \n  chunk_output_type: console\ndraft: false\n---\n\n\n*This is part of the `CDCPLACES` blog series. To view the other posts in this series [click here.](https://brendenmsmith.com/blog#category=CDCPLACES)*\n\n## Introduction\n\nThis brief blog post explains the new additions to `CDCPLACES` 1.1.8. This update provides a few new features:\n\n-   Updated 2024 release data, including several new measures under the health-related social needs category\n\n-   Two new arguments to help filter your data, `cat` and `age_adjust`\n\n-   The ability to query Zip Code Tabulation Areas (ZCTAs)\n\n-   Improved functionality when querying counties with the same name across different states\n\nIn addition to these features, `CDCPLACES` now depends on `yyjsonr` instead of `jsonlite`. Originally, the `get_places` function included a step to clean the returned `geolocation` variable (essentially a centroid of the geography queried). This step was removed as it was computationally intensive on larger queries and unncessary given the support for shapefiles with the `geometry` argument. These changes drastically improve the speed of the package.\n\nTo begin, we will load the required packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"CDCPLACES\")\n# install.packges(\"tidyverse)\n\nlibrary(CDCPLACES)\nlibrary(tidyverse)\n```\n:::\n\n\n## New Measures\n\nWith the 2024 release of the PLACES data, the default option for the release argument in `get_places` has been updated to \"2024\". You can find all the details of these updated data in the release [notes.](https://www.cdc.gov/places/help/data-notes/index.html)\n\nAn exciting addition to the PLACES data are the new health-related social needs variables. These include: social isolation, food stamps, food insecurity, housing insecurity, utility services threat, transportation barriers, and lack of social and emotional support. These measures are only available in 39 states and the District of Columbia (DC).\n\n![](screenshots/HRSN.png)\n\nYou can view these measures by calling `get_dictionary`. The category ID for these new measures is \"SOCLNEED\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_dictionary() |> filter(categoryid == \"SOCLNEED\") |> as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 17\n  measureid   measure_full_name      measure_short_name categoryid category_name\n  <chr>       <chr>                  <chr>              <chr>      <chr>        \n1 ISOLATION   Feeling socially isol… Social Isolation   SOCLNEED   Health-Relat…\n2 FOODSTAMP   Received food stamps … Food Stamps        SOCLNEED   Health-Relat…\n3 FOODINSECU  Food insecurity in th… Food Insecurity    SOCLNEED   Health-Relat…\n4 HOUSINSECU  Housing insecurity in… Housing Insecurity SOCLNEED   Health-Relat…\n5 SHUTUTILITY Utility services thre… Utilities Service… SOCLNEED   Health-Relat…\n6 LACKTRPT    Lack of reliable tran… Transportation Ba… SOCLNEED   Health-Relat…\n7 EMOTIONSPT  Lack of social and em… Lack of Social/Em… SOCLNEED   Health-Relat…\n# ℹ 12 more variables: places_release_2024 <chr>, measurename16_23 <chr>,\n#   places_release_2023 <chr>, places_release_2022 <chr>,\n#   places_release_2021 <chr>, places_release_2020 <chr>,\n#   `_500_cities_release_2019` <chr>, `_500_cities_release_2018` <chr>,\n#   `_500_cities_release_2017` <chr>, `_500_cities_release_2016` <chr>,\n#   frequency_brfss_year <chr>, shortname16_23 <chr>\n```\n\n\n:::\n:::\n\n\n## New Arguments: cat and age_adjust\n\nSome minor quality of life improvements are introduced with the new arguments `cat` and `age_adjust`.\n\nWe can filter our results to returns a set of measures by category ID.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_places(geography = \"county\",\n           state = \"AL\", \n           cat = \"SOCLNEED\") |> as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 938 × 20\n   year  stateabbr statedesc locationname datasource category            measure\n   <chr> <chr>     <chr>     <chr>        <chr>      <chr>               <chr>  \n 1 2022  AL        Alabama   Escambia     BRFSS      Health-Related Soc… Food i…\n 2 2022  AL        Alabama   Greene       BRFSS      Health-Related Soc… Utilit…\n 3 2022  AL        Alabama   Morgan       BRFSS      Health-Related Soc… Receiv…\n 4 2022  AL        Alabama   Franklin     BRFSS      Health-Related Soc… Feelin…\n 5 2022  AL        Alabama   Dale         BRFSS      Health-Related Soc… Food i…\n 6 2022  AL        Alabama   Crenshaw     BRFSS      Health-Related Soc… Food i…\n 7 2022  AL        Alabama   Greene       BRFSS      Health-Related Soc… Feelin…\n 8 2022  AL        Alabama   Tuscaloosa   BRFSS      Health-Related Soc… Housin…\n 9 2022  AL        Alabama   Clay         BRFSS      Health-Related Soc… Utilit…\n10 2022  AL        Alabama   Clay         BRFSS      Health-Related Soc… Housin…\n# ℹ 928 more rows\n# ℹ 13 more variables: data_value_unit <chr>, data_value_type <chr>,\n#   data_value <dbl>, low_confidence_limit <dbl>, high_confidence_limit <dbl>,\n#   totalpopulation <chr>, totalpop18plus <chr>, locationid <chr>,\n#   categoryid <chr>, measureid <chr>, datavaluetypeid <chr>,\n#   short_question_text <chr>, geolocation <list>\n```\n\n\n:::\n:::\n\n\nIf a measure is provided as well as a category, the category will override it. A message is displayed in the console noting this when it occurs.\n\nTo return only the age-adjusted prevalence rates, we can set the argument `age_adjust` to TRUE. Age-adjusted rates are only available at the county level.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_places(geography = \"county\",\n           state = \"AL\", \n           cat = \"SOCLNEED\", \n           age_adjust = TRUE) |> as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 469 × 20\n   year  stateabbr statedesc locationname datasource category            measure\n   <chr> <chr>     <chr>     <chr>        <chr>      <chr>               <chr>  \n 1 2022  AL        Alabama   Choctaw      BRFSS      Health-Related Soc… Feelin…\n 2 2022  AL        Alabama   Escambia     BRFSS      Health-Related Soc… Food i…\n 3 2022  AL        Alabama   Morgan       BRFSS      Health-Related Soc… Receiv…\n 4 2022  AL        Alabama   Dale         BRFSS      Health-Related Soc… Food i…\n 5 2022  AL        Alabama   Etowah       BRFSS      Health-Related Soc… Lack o…\n 6 2022  AL        Alabama   Wilcox       BRFSS      Health-Related Soc… Housin…\n 7 2022  AL        Alabama   Limestone    BRFSS      Health-Related Soc… Food i…\n 8 2022  AL        Alabama   Coosa        BRFSS      Health-Related Soc… Food i…\n 9 2022  AL        Alabama   Crenshaw     BRFSS      Health-Related Soc… Housin…\n10 2022  AL        Alabama   Cleburne     BRFSS      Health-Related Soc… Lack o…\n# ℹ 459 more rows\n# ℹ 13 more variables: data_value_unit <chr>, data_value_type <chr>,\n#   data_value <dbl>, low_confidence_limit <dbl>, high_confidence_limit <dbl>,\n#   totalpopulation <chr>, totalpop18plus <chr>, locationid <chr>,\n#   categoryid <chr>, measureid <chr>, datavaluetypeid <chr>,\n#   short_question_text <chr>, geolocation <list>\n```\n\n\n:::\n:::\n\n\n## Query ZCTAs\n\nA new option has been added to query ZCTAs. To do this, simply set the `geography` argument equal to \"zcta\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw_sleep <- get_places(geography = \"zcta\", \n                      state = \"MI\", \n                      measure = \"SLEEP\",\n                      county = \"Barry\", \n                      geometry = TRUE)\n```\n:::\n\n\nLike other geographies, we can query shapefiles in the same call and easily plot the output:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw_sleep |> \n  ggplot(aes(fill = data_value, label = locationname)) +\n  geom_sf() +\n  geom_sf_label(fill = \"white\") +\n  theme_void() +\n  scale_fill_viridis_c(labels = scales::percent_format(scale = 1)) +\n  labs(title = \"% Sleeping less than 7 hours among adults aged >=18 years\",\n       subtitle = \"In Barry County, Michigan ZCTAs\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## Handle Overlapping Counties\n\nThis update provides the ability to query ZCTAs in different states and counties at the same time. This can raise issues when we want to look at counties that have the same name in multiple states.\n\nConsider the following example. If we were interested in looking at dental health access around the Michigan/Ohio border and the Toledo area, we might query Monroe and Lucas Counties. We would set the query up like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntol <- get_places(geography = \"zcta\",\n                  state = c(\"MI\", \"OH\"),\n                  measure = \"DENTAL\",\n                  county = c(\"LUCAS\", \"MONROE\"),\n                  geometry = TRUE)\n```\n:::\n\n\nThe main issue here is that Ohio also has a Monroe County. `CDCPLACES` will automatically check to see if your returned data contains these overlaps. You will see output in the console that looks like this:\n\n![](screenshots/terminal1.jpg)\n\nThe package will prompt you if you want to include these overlaps. After asking this, it will ask you to specify the counties you wish to exclude from your returned data:\n\n![](screenshots/terminal2.jpg)\n\nIf you choose not to make any exclusions you will get the full data with overlaps. In this example, I excluded Ohio's Monroe County because it is far from the area of interest.[^1]\n\n[^1]: It is crucial to mention that using this function in an R Markdown or Quarto document will override this user input. Full data with overlaps will be returned when knitting/rendering the document. If this is your specific use case, it is recommended to disregard this functionality and filter your data once it is returned.\n\nWe can now plot our returned data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntol |> \n     ggplot(aes(fill = data_value)) +\n     geom_sf() +\n     theme_void() +\n     scale_fill_viridis_c(labels = scales::percent_format(scale = 1)) +\n     labs(title = \"Visited a dentist or dental clinic in the past year among adults aged >=18 years\", \n          subtitle = \"In Monroe County, Michigan and Lucas County, Ohio ZCTAs\")\n```\n:::\n\n\n![](screenshots/tol2.png)\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}