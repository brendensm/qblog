{
  "hash": "926cd8a6776a11c719bd27f3777fb337",
  "result": {
    "markdown": "---\ntitle: \"Intro to Bash Scripting\"\nauthor: \"Brenden Smith\"\ndate: \"2023-11-15\"\ncategories: [Command line, R]\ndescription: \"Learning to write my first useful Bash script.\"\nengine: knitr\nexecute: \n  warning: false\n  eval: false\nimage: bash.png\ncode-fold: show\ncode-overflow: scroll\ntoc: true\n---\n\n\n*And I thought R gave me super powers...*\n\n## Introduction\n\nRecently, I've been having fun with Linux. I really didn't know much about Linux or how it was different from MacOS or Windows. All I really knew was that very smart people use it and many computers depend on it!\n\nBy recommendation of a friend, I tried loading Pop!\\_OS on an old Macbook Air I had laying around. I quickly learned how lightweight many distributions of Linux are, and how customizable they can be.\n\nFor anyone familiar with Linux you know that, even when you are just setting up a computer with the OS, you have to start using a bit of the command line. I had used this before learning some helpful functions with git, but nothing has exposed me to the command line and Bash more than this endeavor.\n\nI have been inspired by this exposure and want to start learning more about the functionality of Bash. As a part of this, I wanted to try creating a Bash script of my own that I could implement into my current workflows.\n\n## The Idea\n\nI work primarily in R. And I love a good R Project. One of my usual habits for creating a project include adding sub folders and a starting script. I realized Bash is really good for doing this! So with some basic commands, I wanted to create a single executable script that makes a new R project, default sub folders, and a starting script.\n\n## Writing the Script\n\nFor the script I wanted several tasks accomplished:\n\n1.  Created an R project file within a contained folder\n2.  Several sub-directories within that folder (data-raw, data, ref, output)\n3.  A blank R script file\n\nTo start, I had the script ask for the name of the project. This was done by using `echo` to print the prompt, then `read` takes in the name of the project.\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\n#!/bin/bash\n\necho \"Please enter your project title: \"\n\nread name\n```\n:::\n\n\nNext, I had to make the script navigate to the folder I want my projects in (for me, this is a folder on my desktop called 'R'). Then, I had a directory made with sub-folders using `mkdir -p`. Here we use `$name` to use the variable stored as the name of the project. Within the `{}` are the names of the sub-folder I most commonly use. This could be anything you like though! Lastly, `touch` creates the blank R script.\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\ncd Desktop/R\n\nmkdir -p $name/{data-raw,data,ref,output}\n\ncd $name\n\ntouch script.R\n```\n:::\n\n\nNext, we have an extra step that allows RStudio to open our new project properly. When I first tried this script out, I created a blank file with the .Rproj extension to set up the project. This immediately gave me problems when I tried to open the project. Specifically, I recall an issue with the version being unspecified.\n\nAfter a bit a research, I discovered that files with .Rproj are nothing really but a .txt file. I opened one of my existing R projects with a text editor and copied the contents exactly into the code chunk below. I wrote this text into the new R project. After some trial and error, I can confirm this method works!\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\n\necho -e 'Version: 1.0\n\nRestoreWorkspace: Default\nSaveWorkspace: Default\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTex: pdfLaTeX' >> $name.Rproj\n```\n:::\n\n\nThe last few lines of code echo some responses to the terminal and launch the new R project.\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\necho \"Project $name has been created.\"\necho \"It is stored in the R directory.\"\necho \"Opening project now...\"\n\nopen $name.Rproj\n```\n:::\n\n\n## Making it Accessible\n\nFor me, personally, I like to be able to execute my scripts without worrying where I am in the terminal. Once my script was working properly, I moved it to the /usr/local/bin folder.\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\nmv setupr /usr/local/bin\n```\n:::\n\n\nAnd that's it! You can find the full script code below. I hope this is helpful! It was certainly useful to me to learn more about bash and make a useful script to help me set up projects.\n\n## Full Script Code\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\n#!/bin/bash\n\necho \"Please enter your project title: \"\n\nread name\n\ncd Desktop/R\n\nmkdir -p $name/{data-raw,data,ref,output}\n\ncd $name\n\ntouch script.R\n\necho -e 'Version: 1.0\n\nRestoreWorkspace: Default\nSaveWorkspace: Default\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTex: pdfLaTeX' >> $name.Rproj\n\necho \"Project $name has been created.\"\necho \"It is stored in the R directory.\"\necho \"Opening project now...\"\n\nopen $name.Rproj\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}